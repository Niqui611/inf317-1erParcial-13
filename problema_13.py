# -*- coding: utf-8 -*-
"""problema_13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p_-KxJeUkWQYToH8EeS_vI3L2dPQRxv4
"""

import multiprocessing

def fibonacci(n):
    if n <= 1:
        return n
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b

def calcular_fibonacci(inicio, fin):
    return [fibonacci(i) for i in range(inicio, fin)]

def main():
    num_terminos = 1000
    num_procesadores = multiprocessing.cpu_count()
    print(num_procesadores)

    pool = multiprocessing.Pool(num_procesadores)
    resultados = []

    # Dividir el trabajo entre los procesadores de manera dinÃ¡mica
    terminos_por_procesador = num_terminos // num_procesadores
    resultados = pool.starmap(calcular_fibonacci, [(i * terminos_por_procesador, (i + 1) * terminos_por_procesador) for i in range(num_procesadores)])
    pool.close()
    pool.join()

    # Combinar los resultados en una sola lista
    secuencia_fibonacci = [resultado for sublist in resultados for resultado in sublist]

    # Imprimir la secuencia de Fibonacci
    print("Secuencia de Fibonacci:")
    print(secuencia_fibonacci)

if __name__ == "__main__":
    main()